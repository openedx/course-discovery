# Generated by Django 2.2.12 on 2020-05-06 12:45


import logging

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

logger = logging.getLogger(__name__)


def forwards_func(apps, schema_editor):
    LanguageTag = apps.get_model('ietf_language_tags', 'LanguageTag')
    LanguageTagTranslation = apps.get_model('ietf_language_tags', 'LanguageTagTranslation')

    for language_tag in LanguageTag.objects.all():
        LanguageTagTranslation.objects.update_or_create(
            master_id=language_tag.pk,
            language_code=settings.PARLER_DEFAULT_LANGUAGE_CODE,
            name_t=language_tag.name,
        )


def backwards_func(apps, schema_editor):
    LanguageTag = apps.get_model('ietf_language_tags', 'LanguageTag')
    LanguageTagTranslation = apps.get_model('ietf_language_tags', 'LanguageTagTranslation')

    for language_tag in LanguageTag.objects.all():
        try:
            translation = LanguageTagTranslation.objects.get(master_id=language_tag.pk, language_code=settings.LANGUAGE_CODE)
            language_tag.name = translation.name_t
            language_tag.save()
        except ObjectDoesNotExist:
            # nothing to migrate
            logger.warning(f'Migrating data from LanguageTagTranslation for master_id={language_tag.pk} DoesNotExist')


class Migration(migrations.Migration):

    dependencies = [
        ('ietf_language_tags', '0002_languagetagtranslation'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
